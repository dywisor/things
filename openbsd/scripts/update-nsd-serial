#!/bin/sh
set -fu

TODAY_YEAR="$(( 10#$(date +%Y) ))"
TODAY_MONTH="$(( 10#$(date +%m) ))"
TODAY_DAY="$(( 10#$(date +%d) ))"

is_today() {
	[ "${1}" -eq "${TODAY_YEAR}" ] && \
	[ "${2}" -eq "${TODAY_MONTH}" ] && \
	[ "${3}" -eq "${TODAY_DAY}" ]
}

# %1: line indent
# %2: year
# %3: month
# %4: day-of-month
# %5: revision
# %6: tag (<whitespace> ";" <whitespace> "serial")
# trailing space gets discarded
#
RE_SERIAL='^([[:space:]]*)([0-9]{4})([0-9]{2})([0-9]{2})([0-9]+)'
RE_SERIAL="${RE_SERIAL}"'([[:space:]]+\;[[:space:]]+serial)[[:space:]]*$'

process_file() {
	local infile
	local data
	local revision
	local new_serial

	infile="${1:?}"

	data="$( sed -nr -e "s#${RE_SERIAL}#\2 \3 \4 \5#p" < "${infile}" )" || return

	# eval first matching line only

	set -- ${data}
	# numbers starting with 10 would be interpreted as octal numbers, force-convert to base 10
	set -- "$(( 10#${1} ))" "$(( 10#${2} ))" "$(( 10#${3} ))" "$(( 10#${4} ))"
	: "${1:?year}" "${2:?month}" "${3:?day-of-month}" "${4:?revision}"


	if is_today "${1}" "${2}" "${3}"; then
		revision="$(( $4 + 1 ))"
		printf 'revbump: %s: %d -> %d\n' "${infile}" "${4}" "${revision}"
	
	else
		revision='1'
		printf 'new day: %s\n' "${infile}"
	fi

	new_serial="$(printf '%04d%02d%02d%02d' "${TODAY_YEAR}" "${TODAY_MONTH}" "${TODAY_DAY}" "${revision}")" || return
	: "${new_serial:?}"

	sed -r -e "s#${RE_SERIAL}#\1${new_serial}\6#" -i "${infile}"


}

while [ $# -gt 0 ]; do
	process_file "${1}" && shift || exit
done
