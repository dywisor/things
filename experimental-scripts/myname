#!/usr/bin/env python
# -*- coding: utf-8 -*-
#

# read $HOME/.myname and prints it to stdout / copies it to clipboard

from __future__ import absolute_import
from __future__ import unicode_literals, division, generators
from __future__ import print_function, nested_scopes, with_statement

import io
import os
import sys
import pwd
import subprocess

def get_home_dir():
   home = os.environ.get('HOME')
   if not home:
      ent = pwd.getpwuid(os.getuid())
      if ent:
         home = ent.pw_dir

   return home

def main(argv):
   home = get_home_dir()
   if not home:
      return 2

   # read the file.
   myname = None
   myname_file = home + os.sep + '.myname'
   fh = None
   try:
      fh = io.open(myname_file, 'r', encoding='utf-8')
      myname = [ w for w in fh.readline().strip().split(None) if w ]
   except OSError:
      return 5
   finally:
      if fh: fh.close()

   if not myname:
      return 3

   # extract output str
   name = None
   if not argv or not argv[0]:
      name = ' '.join(myname)
   elif argv[0] == '-1':
      name = myname[0]
   elif argv[0] == '-f':
      name = ' '.join(myname[:-1])
   elif argv[0] == '-2':
      name = myname[-1]
   else:
      return os.EX_USAGE

   # write name to stdout
   sys.stdout.write(name + '\n')
   sys.stdout.flush()

   # copy name to clipboard if $DISPLAY is set
   if os.environ.get('DISPLAY'):
      devnull = proc = None
      try:
         devnull = open("/dev/null", "w")
         proc = subprocess.Popen (
            [ "xclip", "-in", "-selection", "clip" ],
            stdout=devnull, stdin=subprocess.PIPE
         )
         proc.communicate ( name.encode() )
      except:
         if proc is not None:
            try:
               proc.terminate()
               proc.kill()
            except:
               pass
         # --
         if devnull: devnull.close()
         raise

   return 0

if __name__ == '__main__':
   try:
      excode = main(sys.argv[1:])
   except KeyboardInterrupt:
      excode = 130

   sys.exit(os.EX_OK ^ excode)
